{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { createChatService, fetchChatsService, fetchMessagesService } from \"../services/messageServices\";\nimport { logout } from \"./userSlice\";\nconst initialState = {\n  conversationID: \"\",\n  to: \"\",\n  messages: [],\n  chats: []\n};\nexport const getAllChats = createAsyncThunk(\"message/getAllChats\", async (props, thunkAPI) => {\n  const {\n    customFetch,\n    users\n  } = props;\n  const {\n    getState,\n    rejectWithValue,\n    fulfillWithValue\n  } = thunkAPI;\n  const {\n    user\n  } = getState();\n  const data = await customFetch(fetchChatsService);\n  if (!data) return rejectWithValue();\n  return fulfillWithValue({\n    users: users.filter(u => u._id !== user.id),\n    chats: data.chats\n  });\n});\nexport const createChat = createAsyncThunk(\"message/createChat\", async (props, thunkAPI) => {\n  const {\n    getState,\n    dispatch,\n    rejectWithValue\n  } = thunkAPI;\n  const {\n    customFetch,\n    id\n  } = props;\n  const {\n    user,\n    users,\n    message\n  } = getState();\n  const data = await customFetch(createChatService, {\n    partnerId: id\n  });\n  if (!data) rejectWithValue();\n  if (message.chats.every(chat => chat._id !== data.cid)) {\n    dispatch(getAllChats({\n      customFetch,\n      users: users.users\n    }));\n  }\n  dispatch(messageSlice.actions.setChatID(data.cid));\n  dispatch(messageSlice.actions.setReceiverID(id));\n  const _data = await customFetch(fetchMessagesService, {\n    chatId: data.cid\n  });\n  dispatch(clearMessage());\n  dispatch(setMessages({\n    messages: _data.messages,\n    id: user.id\n  }));\n});\nexport const updateChats = createAsyncThunk(\"message/updateChat\", async (props, thunkAPI) => {\n  const {\n    getState,\n    dispatch,\n    fulfillWithValue\n  } = thunkAPI;\n  const {\n    lastMessage,\n    id,\n    chatId,\n    customFetch\n  } = props;\n  const {\n    message,\n    users\n  } = getState();\n  let index;\n  if (chatId) index = message.chats.findIndex(chat => chat._id === chatId);else index = message.chats.findIndex(chat => chat.members.includes(id));\n  if (index >= 0) return fulfillWithValue({\n    index,\n    lastMessage\n  });\n  dispatch(getAllChats({\n    customFetch,\n    users: users.users\n  }));\n});\nconst messageSlice = createSlice({\n  name: \"message\",\n  initialState,\n  reducers: {\n    clearMessage: (state, action) => {\n      var _action$payload;\n      const conversationID = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.conversationID;\n      if (conversationID) {\n        const index = state.chats.findIndex(chat => chat._id === conversationID);\n        const updatingChat = state.chats[index];\n        state.chats = [{\n          ...updatingChat,\n          lastMessage: \"\"\n        }, ...state.chats.filter(chat => chat._id !== conversationID)];\n        if (conversationID === state.conversationID) state.messages = [];\n      } else {\n        state.messages = [];\n      }\n    },\n    setChatID: (state, action) => {\n      state.conversationID = action.payload;\n    },\n    setReceiverID: (state, action) => {\n      state.to = action.payload;\n    },\n    setMessages: (state, action) => {\n      const {\n        messages,\n        id\n      } = action.payload;\n      state.messages = messages.map(message => {\n        return {\n          text: message.text,\n          send: message.sender === id,\n          createdAt: message.createdAt\n        };\n      });\n    },\n    addMessages: (state, action) => {\n      const {\n        text,\n        send = false\n      } = action.payload;\n      state.messages = [...state.messages, {\n        text,\n        send,\n        createdAt: String(new Date())\n      }];\n    },\n    deleteChat: (state, action) => {\n      state.chats = state.chats.filter(chat => chat._id !== action.payload);\n      if (action.payload === state.conversationID) state.conversationID = \"\";\n    }\n  },\n  extraReducers: {\n    [getAllChats.fulfilled]: (state, action) => {\n      const {\n        users,\n        chats\n      } = action.payload;\n      const getUserDetails = members => users.find(user => members.includes(user._id));\n      state.chats = chats.map(chat => ({\n        ...chat,\n        userDetails: getUserDetails(chat.members)\n      }));\n    },\n    [updateChats.fulfilled]: (state, action) => {\n      var _action$payload2;\n      const updatingChat = state.chats[(_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.index];\n      if (updatingChat) {\n        state.chats = [{\n          ...updatingChat,\n          lastMessage: action.payload.lastMessage\n        }, ...state.chats.filter(chat => chat._id !== updatingChat._id)];\n      }\n    },\n    [logout.type]: (state, action) => {\n      return initialState;\n    }\n  }\n});\nexport const {\n  addMessages,\n  clearMessage,\n  setChatID,\n  setReceiverID,\n  setMessages,\n  deleteChat\n} = messageSlice.actions;\nexport default messageSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createChatService","fetchChatsService","fetchMessagesService","logout","initialState","conversationID","to","messages","chats","getAllChats","props","thunkAPI","customFetch","users","getState","rejectWithValue","fulfillWithValue","user","data","filter","u","_id","id","createChat","dispatch","message","partnerId","every","chat","cid","messageSlice","actions","setChatID","setReceiverID","_data","chatId","clearMessage","setMessages","updateChats","lastMessage","index","findIndex","members","includes","name","reducers","state","action","payload","updatingChat","map","text","send","sender","createdAt","addMessages","String","Date","deleteChat","extraReducers","fulfilled","getUserDetails","find","userDetails","type","reducer"],"sources":["C:/Users/samth/repomain-1/src/features/messageSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { createChatService, fetchChatsService, fetchMessagesService } from \"../services/messageServices\";\r\nimport { logout } from \"./userSlice\";\r\n\r\nconst initialState = {\r\n\tconversationID: \"\",\r\n\tto: \"\",\r\n\tmessages: [],\r\n\tchats: [],\r\n};\r\n\r\nexport const getAllChats = createAsyncThunk(\"message/getAllChats\", async (props, thunkAPI) => {\r\n\tconst { customFetch, users } = props;\r\n\tconst { getState, rejectWithValue, fulfillWithValue } = thunkAPI;\r\n\tconst { user } = getState();\r\n\tconst data = await customFetch(fetchChatsService);\r\n\tif (!data) return rejectWithValue();\r\n\treturn fulfillWithValue({\r\n\t\tusers: users.filter(u => u._id !== user.id),\r\n\t\tchats: data.chats,\r\n\t});\r\n});\r\n\r\nexport const createChat = createAsyncThunk(\"message/createChat\", async (props, thunkAPI) => {\r\n\tconst { getState, dispatch, rejectWithValue } = thunkAPI;\r\n\tconst { customFetch, id } = props;\r\n\tconst { user, users, message } = getState();\r\n\tconst data = await customFetch(createChatService, { partnerId: id });\r\n\tif (!data) rejectWithValue();\r\n\tif (message.chats.every(chat => chat._id !== data.cid)) {\r\n\t\tdispatch(getAllChats({ customFetch, users: users.users }));\r\n\t}\r\n\tdispatch(messageSlice.actions.setChatID(data.cid));\r\n\tdispatch(messageSlice.actions.setReceiverID(id));\r\n\tconst _data = await customFetch(fetchMessagesService, { chatId: data.cid });\r\n\tdispatch(clearMessage());\r\n\tdispatch(setMessages({ messages: _data.messages, id: user.id }));\r\n});\r\n\r\nexport const updateChats = createAsyncThunk(\"message/updateChat\", async (props, thunkAPI) => {\r\n\tconst { getState, dispatch, fulfillWithValue } = thunkAPI;\r\n\tconst { lastMessage, id, chatId, customFetch } = props;\r\n\tconst { message, users } = getState();\r\n\tlet index;\r\n\tif (chatId) index = message.chats.findIndex(chat => chat._id === chatId);\r\n\telse index = message.chats.findIndex(chat => chat.members.includes(id));\r\n\tif (index >= 0) return fulfillWithValue({ index, lastMessage });\r\n\tdispatch(getAllChats({ customFetch, users: users.users }));\r\n});\r\n\r\nconst messageSlice = createSlice({\r\n\tname: \"message\",\r\n\tinitialState,\r\n\treducers: {\r\n\t\tclearMessage: (state, action) => {\r\n\t\t\tconst conversationID = action.payload?.conversationID;\r\n\t\t\tif (conversationID) {\r\n\t\t\t\tconst index = state.chats.findIndex(chat => chat._id === conversationID);\r\n\t\t\t\tconst updatingChat = state.chats[index];\r\n\t\t\t\tstate.chats = [\r\n\t\t\t\t\t{ ...updatingChat, lastMessage: \"\" },\r\n\t\t\t\t\t...state.chats.filter(chat => chat._id !== conversationID),\r\n\t\t\t\t];\r\n\t\t\t\tif (conversationID === state.conversationID) state.messages = [];\r\n\t\t\t} else {\r\n\t\t\t\tstate.messages = [];\r\n\t\t\t}\r\n\t\t},\r\n\t\tsetChatID: (state, action) => {\r\n\t\t\tstate.conversationID = action.payload;\r\n\t\t},\r\n\t\tsetReceiverID: (state, action) => {\r\n\t\t\tstate.to = action.payload;\r\n\t\t},\r\n\t\tsetMessages: (state, action) => {\r\n\t\t\tconst { messages, id } = action.payload;\r\n\t\t\tstate.messages = messages.map(message => {\r\n\t\t\t\treturn { text: message.text, send: message.sender === id, createdAt: message.createdAt };\r\n\t\t\t});\r\n\t\t},\r\n\t\taddMessages: (state, action) => {\r\n\t\t\tconst { text, send = false } = action.payload;\r\n\t\t\tstate.messages = [...state.messages, { text, send, createdAt: String(new Date()) }];\r\n\t\t},\r\n\t\tdeleteChat: (state, action) => {\r\n\t\t\tstate.chats = state.chats.filter(chat => chat._id !== action.payload);\r\n\t\t\tif (action.payload === state.conversationID) state.conversationID = \"\";\r\n\t\t},\r\n\t},\r\n\textraReducers: {\r\n\t\t[getAllChats.fulfilled]: (state, action) => {\r\n\t\t\tconst { users, chats } = action.payload;\r\n\t\t\tconst getUserDetails = members => users.find(user => members.includes(user._id));\r\n\t\t\tstate.chats = chats.map(chat => ({ ...chat, userDetails: getUserDetails(chat.members) }));\r\n\t\t},\r\n\t\t[updateChats.fulfilled]: (state, action) => {\r\n\t\t\tconst updatingChat = state.chats[action.payload?.index];\r\n\t\t\tif (updatingChat) {\r\n\t\t\t\tstate.chats = [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...updatingChat,\r\n\t\t\t\t\t\tlastMessage: action.payload.lastMessage,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t...state.chats.filter(chat => chat._id !== updatingChat._id),\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t},\r\n\t\t[logout.type]: (state, action) => {\r\n\t\t\treturn initialState;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { addMessages, clearMessage, setChatID, setReceiverID, setMessages, deleteChat } =\r\n\tmessageSlice.actions;\r\n\r\nexport default messageSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}