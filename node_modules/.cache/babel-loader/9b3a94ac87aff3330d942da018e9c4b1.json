{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samth\\\\repomain-1\\\\src\\\\components\\\\DataList\\\\DataList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataList = _ref => {\n  _s();\n  var _mailDomains$domains2;\n  let {\n    email,\n    setEmail\n  } = _ref;\n  const [mailDomains, setMailDomains] = useState({});\n  const emailDomains = useMemo(() => [\"gmail\", \"hotmail\", \"outlook\", \"aol\", \"aim\", \"yahoo\", \"icloud\", \"protonmail\", \"zoho\", \"yandex\", \"gmx\", \"hubspot\", \"mail\"], []);\n  useEffect(() => {\n    var _mailDomains$domains;\n    if (email.includes(\"@\")) {\n      const _email = email.split(\"@\")[0];\n      let domains = emailDomains.map(domain => `${mailDomains.mail || _email}@${domain}.com`);\n      domains = domains.filter(domain => domain.match(new RegExp(email)));\n      setMailDomains(prev => ({\n        show: true,\n        mail: prev.mail || _email,\n        domains\n      }));\n    } else if (!email.includes(\"@\")) {\n      setMailDomains({});\n    }\n    if ((_mailDomains$domains = mailDomains.domains) === null || _mailDomains$domains === void 0 ? void 0 : _mailDomains$domains.includes(email)) {\n      setMailDomains(prev => ({\n        ...prev,\n        show: false\n      }));\n    }\n    // eslint-disable-next-line\n  }, [email, emailDomains]);\n  const updateEmail = e => {\n    setEmail(e.target.value);\n  };\n  if (mailDomains.show) return /*#__PURE__*/_jsxDEV(\"datalist\", {\n    id: \"email-domains\",\n    className: \"email-datalist\",\n    children: (_mailDomains$domains2 = mailDomains.domains) === null || _mailDomains$domains2 === void 0 ? void 0 : _mailDomains$domains2.map(mail => /*#__PURE__*/_jsxDEV(\"option\", {\n      onClick: updateEmail,\n      children: mail\n    }, mail, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 4\n  }, this);\n  return null;\n};\n_s(DataList, \"JeeiQyAXSVNeKGN5m5RO71tNZZs=\");\n_c = DataList;\nexport default DataList;\nvar _c;\n$RefreshReg$(_c, \"DataList\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","DataList","email","setEmail","mailDomains","setMailDomains","emailDomains","includes","_email","split","domains","map","domain","mail","filter","match","RegExp","prev","show","updateEmail","e","target","value"],"sources":["C:/Users/samth/repomain-1/src/components/DataList/DataList.jsx"],"sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\r\n\r\nconst DataList = ({ email, setEmail }) => {\r\n\tconst [mailDomains, setMailDomains] = useState({});\r\n\r\n\tconst emailDomains = useMemo(\r\n\t\t() => [\r\n\t\t\t\"gmail\",\r\n\t\t\t\"hotmail\",\r\n\t\t\t\"outlook\",\r\n\t\t\t\"aol\",\r\n\t\t\t\"aim\",\r\n\t\t\t\"yahoo\",\r\n\t\t\t\"icloud\",\r\n\t\t\t\"protonmail\",\r\n\t\t\t\"zoho\",\r\n\t\t\t\"yandex\",\r\n\t\t\t\"gmx\",\r\n\t\t\t\"hubspot\",\r\n\t\t\t\"mail\",\r\n\t\t],\r\n\t\t[]\r\n\t);\r\n\tuseEffect(() => {\r\n\t\tif (email.includes(\"@\")) {\r\n\t\t\tconst _email = email.split(\"@\")[0];\r\n\t\t\tlet domains = emailDomains.map(domain => `${mailDomains.mail || _email}@${domain}.com`);\r\n\t\t\tdomains = domains.filter(domain => domain.match(new RegExp(email)));\r\n\t\t\tsetMailDomains(prev => ({ show: true, mail: prev.mail || _email, domains }));\r\n\t\t} else if (!email.includes(\"@\")) {\r\n\t\t\tsetMailDomains({});\r\n\t\t}\r\n\t\tif (mailDomains.domains?.includes(email)) {\r\n\t\t\tsetMailDomains(prev => ({ ...prev, show: false }));\r\n\t\t}\r\n\t\t// eslint-disable-next-line\r\n\t}, [email, emailDomains]);\r\n\r\n\tconst updateEmail = e => {\r\n\t\tsetEmail(e.target.value);\r\n\t};\r\n\r\n\tif (mailDomains.show)\r\n\t\treturn (\r\n\t\t\t<datalist id=\"email-domains\" className=\"email-datalist\">\r\n\t\t\t\t{mailDomains.domains?.map(mail => (\r\n\t\t\t\t\t<option onClick={updateEmail} key={mail}>\r\n\t\t\t\t\t\t{mail}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</datalist>\r\n\t\t);\r\n\treturn null;\r\n};\r\n\r\nexport default DataList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAAC;AAE5D,MAAMC,QAAQ,GAAG,QAAyB;EAAA;EAAA;EAAA,IAAxB;IAAEC,KAAK;IAAEC;EAAS,CAAC;EACpC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,MAAMO,YAAY,GAAGN,OAAO,CAC3B,MAAM,CACL,OAAO,EACP,SAAS,EACT,SAAS,EACT,KAAK,EACL,KAAK,EACL,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,MAAM,EACN,QAAQ,EACR,KAAK,EACL,SAAS,EACT,MAAM,CACN,EACD,EAAE,CACF;EACDF,SAAS,CAAC,MAAM;IAAA;IACf,IAAII,KAAK,CAACK,QAAQ,CAAC,GAAG,CAAC,EAAE;MACxB,MAAMC,MAAM,GAAGN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAClC,IAAIC,OAAO,GAAGJ,YAAY,CAACK,GAAG,CAACC,MAAM,IAAK,GAAER,WAAW,CAACS,IAAI,IAAIL,MAAO,IAAGI,MAAO,MAAK,CAAC;MACvFF,OAAO,GAAGA,OAAO,CAACI,MAAM,CAACF,MAAM,IAAIA,MAAM,CAACG,KAAK,CAAC,IAAIC,MAAM,CAACd,KAAK,CAAC,CAAC,CAAC;MACnEG,cAAc,CAACY,IAAI,KAAK;QAAEC,IAAI,EAAE,IAAI;QAAEL,IAAI,EAAEI,IAAI,CAACJ,IAAI,IAAIL,MAAM;QAAEE;MAAQ,CAAC,CAAC,CAAC;IAC7E,CAAC,MAAM,IAAI,CAACR,KAAK,CAACK,QAAQ,CAAC,GAAG,CAAC,EAAE;MAChCF,cAAc,CAAC,CAAC,CAAC,CAAC;IACnB;IACA,4BAAID,WAAW,CAACM,OAAO,yDAAnB,qBAAqBH,QAAQ,CAACL,KAAK,CAAC,EAAE;MACzCG,cAAc,CAACY,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEC,IAAI,EAAE;MAAM,CAAC,CAAC,CAAC;IACnD;IACA;EACD,CAAC,EAAE,CAAChB,KAAK,EAAEI,YAAY,CAAC,CAAC;EAEzB,MAAMa,WAAW,GAAGC,CAAC,IAAI;IACxBjB,QAAQ,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EAED,IAAIlB,WAAW,CAACc,IAAI,EACnB,oBACC;IAAU,EAAE,EAAC,eAAe;IAAC,SAAS,EAAC,gBAAgB;IAAA,mCACrDd,WAAW,CAACM,OAAO,0DAAnB,sBAAqBC,GAAG,CAACE,IAAI,iBAC7B;MAAQ,OAAO,EAAEM,WAAY;MAAA,UAC3BN;IAAI,GAD6BA,IAAI;MAAA;MAAA;MAAA;IAAA,QAGvC;EAAC;IAAA;IAAA;IAAA;EAAA,QACQ;EAEb,OAAO,IAAI;AACZ,CAAC;AAAC,GAnDIZ,QAAQ;AAAA,KAARA,QAAQ;AAqDd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}