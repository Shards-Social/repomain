{"ast":null,"code":"const load = src => {\n  return new Promise((resolve, reject) => {\n    const img = new window.Image();\n    img.addEventListener(\"load\", () => resolve(img), false);\n    img.addEventListener(\"error\", reject, false);\n    img.src = src;\n  });\n};\n/*\n * Resize the image based on the given height or width boundary.\n * Auto resize based on aspect ratio.\n **/\nconst resize = (targetWidth, targetHeight) => {\n  return (width, height) => {\n    if (!targetWidth && !targetHeight) return {\n      width,\n      height\n    };\n    const originalAspectRatio = width / height;\n    const targetAspectRatio = targetWidth / targetHeight;\n    let outputWidth, outputHeight;\n    if (originalAspectRatio > targetAspectRatio) {\n      outputWidth = Math.min(width, targetWidth);\n      outputHeight = outputWidth / originalAspectRatio;\n    } else {\n      outputHeight = Math.min(height, targetHeight);\n      outputWidth = outputHeight * originalAspectRatio;\n    }\n    return {\n      width: outputWidth,\n      height: outputHeight\n    };\n  };\n};\nexport default {\n  load,\n  resize\n};","map":{"version":3,"names":["load","src","Promise","resolve","reject","img","window","Image","addEventListener","resize","targetWidth","targetHeight","width","height","originalAspectRatio","targetAspectRatio","outputWidth","outputHeight","Math","min"],"sources":["C:/Users/samth/repomain-1/node_modules/compress.js/src/core/image.js"],"sourcesContent":["const load = (src) => {\n  return new Promise((resolve, reject) => {\n    const img = new window.Image();\n    img.addEventListener(\"load\", () => resolve(img), false);\n    img.addEventListener(\"error\", reject, false);\n    img.src = src;\n  });\n};\n/*\n * Resize the image based on the given height or width boundary.\n * Auto resize based on aspect ratio.\n **/\nconst resize = (targetWidth, targetHeight) => {\n  return (width, height) => {\n    if (!targetWidth && !targetHeight) return { width, height };\n\n    const originalAspectRatio = width / height;\n    const targetAspectRatio = targetWidth / targetHeight;\n\n    let outputWidth, outputHeight;\n\n    if (originalAspectRatio > targetAspectRatio) {\n      outputWidth = Math.min(width, targetWidth);\n      outputHeight = outputWidth / originalAspectRatio;\n    } else {\n      outputHeight = Math.min(height, targetHeight);\n      outputWidth = outputHeight * originalAspectRatio;\n    }\n\n    return { width: outputWidth, height: outputHeight };\n  };\n};\n\nexport default { load, resize };\n"],"mappings":"AAAA,MAAMA,IAAI,GAAIC,GAAG,IAAK;EACpB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,KAAK,EAAE;IAC9BF,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAE,MAAML,OAAO,CAACE,GAAG,CAAC,EAAE,KAAK,CAAC;IACvDA,GAAG,CAACG,gBAAgB,CAAC,OAAO,EAAEJ,MAAM,EAAE,KAAK,CAAC;IAC5CC,GAAG,CAACJ,GAAG,GAAGA,GAAG;EACf,CAAC,CAAC;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMQ,MAAM,GAAG,CAACC,WAAW,EAAEC,YAAY,KAAK;EAC5C,OAAO,CAACC,KAAK,EAAEC,MAAM,KAAK;IACxB,IAAI,CAACH,WAAW,IAAI,CAACC,YAAY,EAAE,OAAO;MAAEC,KAAK;MAAEC;IAAO,CAAC;IAE3D,MAAMC,mBAAmB,GAAGF,KAAK,GAAGC,MAAM;IAC1C,MAAME,iBAAiB,GAAGL,WAAW,GAAGC,YAAY;IAEpD,IAAIK,WAAW,EAAEC,YAAY;IAE7B,IAAIH,mBAAmB,GAAGC,iBAAiB,EAAE;MAC3CC,WAAW,GAAGE,IAAI,CAACC,GAAG,CAACP,KAAK,EAAEF,WAAW,CAAC;MAC1CO,YAAY,GAAGD,WAAW,GAAGF,mBAAmB;IAClD,CAAC,MAAM;MACLG,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACN,MAAM,EAAEF,YAAY,CAAC;MAC7CK,WAAW,GAAGC,YAAY,GAAGH,mBAAmB;IAClD;IAEA,OAAO;MAAEF,KAAK,EAAEI,WAAW;MAAEH,MAAM,EAAEI;IAAa,CAAC;EACrD,CAAC;AACH,CAAC;AAED,eAAe;EAAEjB,IAAI;EAAES;AAAO,CAAC"},"metadata":{},"sourceType":"module"}