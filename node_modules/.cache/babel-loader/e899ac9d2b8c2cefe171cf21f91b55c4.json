{"ast":null,"code":"const base64ToFile = function (base64) {\n  let mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"image/jpeg\";\n  const byteString = window.atob(base64);\n  const content = [];\n  for (let i = 0; i < byteString.length; i++) {\n    content[i] = byteString.charCodeAt(i);\n  }\n  return new window.Blob([new Uint8Array(content)], {\n    type: mime\n  });\n};\nconst imageToCanvas = (width, height, orientation) => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  canvas.width = width;\n  canvas.height = height;\n  return image => {\n    if (!orientation || orientation > 8) {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      return canvas;\n    }\n    if (orientation > 4) {\n      canvas.width = height;\n      canvas.height = width;\n    }\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        context.translate(width, 0);\n        context.scale(-1, 1);\n        break;\n      case 3:\n        // 180° rotate left\n        context.translate(width, height);\n        context.rotate(Math.PI);\n        break;\n      case 4:\n        // vertical flip\n        context.translate(0, height);\n        context.scale(1, -1);\n        break;\n      case 5:\n        // vertical flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.scale(1, -1);\n        break;\n      case 6:\n        // 90° rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(0, -height);\n        break;\n      case 7:\n        // horizontal flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(width, -height);\n        context.scale(-1, 1);\n        break;\n      case 8:\n        // 90° rotate left\n        context.rotate(-0.5 * Math.PI);\n        context.translate(-width, 0);\n        break;\n    }\n    if (orientation > 4) {\n      context.drawImage(image, 0, 0, canvas.height, canvas.width);\n    } else {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    }\n    return canvas;\n  };\n};\nconst canvasToBase64 = function (canvas) {\n  let quality = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.75;\n  // in order to compress the final image format has to be jpeg\n  const base64 = canvas.toDataURL(\"image/jpeg\", quality);\n  return base64;\n};\nconst size = size => ({\n  KB: size / 1000,\n  MB: size / (1000 * 1000)\n});\nexport default {\n  base64ToFile,\n  imageToCanvas,\n  canvasToBase64,\n  size\n};","map":{"version":3,"names":["base64ToFile","base64","mime","byteString","window","atob","content","i","length","charCodeAt","Blob","Uint8Array","type","imageToCanvas","width","height","orientation","canvas","document","createElement","context","getContext","image","drawImage","translate","scale","rotate","Math","PI","canvasToBase64","quality","toDataURL","size","KB","MB"],"sources":["C:/Users/samth/repomain-1/node_modules/compress.js/src/core/converter.js"],"sourcesContent":["const base64ToFile = (base64, mime = \"image/jpeg\") => {\n  const byteString = window.atob(base64);\n  const content = [];\n  for (let i = 0; i < byteString.length; i++) {\n    content[i] = byteString.charCodeAt(i);\n  }\n  return new window.Blob([new Uint8Array(content)], { type: mime });\n};\n\nconst imageToCanvas = (width, height, orientation) => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n\n  canvas.width = width;\n  canvas.height = height;\n\n  return (image) => {\n    if (!orientation || orientation > 8) {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      return canvas;\n    }\n    if (orientation > 4) {\n      canvas.width = height;\n      canvas.height = width;\n    }\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        context.translate(width, 0);\n        context.scale(-1, 1);\n        break;\n      case 3:\n        // 180° rotate left\n        context.translate(width, height);\n        context.rotate(Math.PI);\n        break;\n      case 4:\n        // vertical flip\n        context.translate(0, height);\n        context.scale(1, -1);\n        break;\n      case 5:\n        // vertical flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.scale(1, -1);\n        break;\n      case 6:\n        // 90° rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(0, -height);\n        break;\n      case 7:\n        // horizontal flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(width, -height);\n        context.scale(-1, 1);\n        break;\n      case 8:\n        // 90° rotate left\n        context.rotate(-0.5 * Math.PI);\n        context.translate(-width, 0);\n        break;\n    }\n    if (orientation > 4) {\n      context.drawImage(image, 0, 0, canvas.height, canvas.width);\n    } else {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    }\n    return canvas;\n  };\n};\n\nconst canvasToBase64 = (canvas, quality = 0.75) => {\n  // in order to compress the final image format has to be jpeg\n  const base64 = canvas.toDataURL(\"image/jpeg\", quality);\n  return base64;\n};\n\nconst size = (size) => ({\n  KB: size / 1000,\n  MB: size / (1000 * 1000),\n});\n\nexport default { base64ToFile, imageToCanvas, canvasToBase64, size };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}