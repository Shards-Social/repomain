{"ast":null,"code":"import{createAsyncThunk,createSlice}from\"@reduxjs/toolkit\";import{fetchUsersService}from\"../services/userServices\";import{getAllChats}from\"./messageSlice\";import{logout}from\"./userSlice\";const initialState={users:[],usersOnline:[]};export const getUsers=createAsyncThunk(\"users/getUsers\",async(props,thunkAPI)=>{const{customFetch}=props;const{fulfillWithValue,rejectWithValue,dispatch,getState}=thunkAPI;const data=await customFetch(fetchUsersService);if(!data)return rejectWithValue();const{users}=data;if(!getState().user.isGuest)dispatch(getAllChats({customFetch,users}));return fulfillWithValue(users);});const usersSlice=createSlice({name:\"users\",initialState,reducers:{addOnline:(state,action)=>{state.usersOnline=action.payload;}},extraReducers:{[getUsers.fulfilled]:(state,action)=>{state.users=action.payload;},[logout.type]:(state,action)=>{return initialState;}}});export const{addOnline}=usersSlice.actions;export default usersSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchUsersService","getAllChats","logout","initialState","users","usersOnline","getUsers","props","thunkAPI","customFetch","fulfillWithValue","rejectWithValue","dispatch","getState","data","user","isGuest","usersSlice","name","reducers","addOnline","state","action","payload","extraReducers","fulfilled","type","actions","reducer"],"sources":["C:/Users/samth/repomain-1/src/features/usersSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { fetchUsersService } from \"../services/userServices\";\r\nimport { getAllChats } from \"./messageSlice\";\r\nimport { logout } from \"./userSlice\";\r\n\r\nconst initialState = {\r\n\tusers: [],\r\n\tusersOnline: [],\r\n};\r\n\r\nexport const getUsers = createAsyncThunk(\"users/getUsers\", async (props, thunkAPI) => {\r\n\tconst { customFetch } = props;\r\n\tconst { fulfillWithValue, rejectWithValue, dispatch, getState } = thunkAPI;\r\n\tconst data = await customFetch(fetchUsersService);\r\n\tif (!data) return rejectWithValue();\r\n\tconst { users } = data;\r\n\tif (!getState().user.isGuest) dispatch(getAllChats({ customFetch, users }));\r\n\treturn fulfillWithValue(users);\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n\tname: \"users\",\r\n\tinitialState,\r\n\treducers: {\r\n\t\taddOnline: (state, action) => {\r\n\t\t\tstate.usersOnline = action.payload;\r\n\t\t},\r\n\t},\r\n\textraReducers: {\r\n\t\t[getUsers.fulfilled]: (state, action) => {\r\n\t\t\tstate.users = action.payload;\r\n\t\t},\r\n\t\t[logout.type]: (state, action) => {\r\n\t\t\treturn initialState;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const { addOnline } = usersSlice.actions;\r\nexport default usersSlice.reducer;\r\n"],"mappings":"AAAA,OAASA,gBAAgB,CAAEC,WAAW,KAAQ,kBAAkB,CAChE,OAASC,iBAAiB,KAAQ,0BAA0B,CAC5D,OAASC,WAAW,KAAQ,gBAAgB,CAC5C,OAASC,MAAM,KAAQ,aAAa,CAEpC,KAAM,CAAAC,YAAY,CAAG,CACpBC,KAAK,CAAE,EAAE,CACTC,WAAW,CAAE,EACd,CAAC,CAED,MAAO,MAAM,CAAAC,QAAQ,CAAGR,gBAAgB,CAAC,gBAAgB,CAAE,MAAOS,KAAK,CAAEC,QAAQ,GAAK,CACrF,KAAM,CAAEC,WAAY,CAAC,CAAGF,KAAK,CAC7B,KAAM,CAAEG,gBAAgB,CAAEC,eAAe,CAAEC,QAAQ,CAAEC,QAAS,CAAC,CAAGL,QAAQ,CAC1E,KAAM,CAAAM,IAAI,CAAG,KAAM,CAAAL,WAAW,CAACT,iBAAiB,CAAC,CACjD,GAAI,CAACc,IAAI,CAAE,MAAO,CAAAH,eAAe,CAAC,CAAC,CACnC,KAAM,CAAEP,KAAM,CAAC,CAAGU,IAAI,CACtB,GAAI,CAACD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACC,OAAO,CAAEJ,QAAQ,CAACX,WAAW,CAAC,CAAEQ,WAAW,CAAEL,KAAM,CAAC,CAAC,CAAC,CAC3E,MAAO,CAAAM,gBAAgB,CAACN,KAAK,CAAC,CAC/B,CAAC,CAAC,CAEF,KAAM,CAAAa,UAAU,CAAGlB,WAAW,CAAC,CAC9BmB,IAAI,CAAE,OAAO,CACbf,YAAY,CACZgB,QAAQ,CAAE,CACTC,SAAS,CAAEA,CAACC,KAAK,CAAEC,MAAM,GAAK,CAC7BD,KAAK,CAAChB,WAAW,CAAGiB,MAAM,CAACC,OAAO,CACnC,CACD,CAAC,CACDC,aAAa,CAAE,CACd,CAAClB,QAAQ,CAACmB,SAAS,EAAG,CAACJ,KAAK,CAAEC,MAAM,GAAK,CACxCD,KAAK,CAACjB,KAAK,CAAGkB,MAAM,CAACC,OAAO,CAC7B,CAAC,CACD,CAACrB,MAAM,CAACwB,IAAI,EAAG,CAACL,KAAK,CAAEC,MAAM,GAAK,CACjC,MAAO,CAAAnB,YAAY,CACpB,CACD,CACD,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEiB,SAAU,CAAC,CAAGH,UAAU,CAACU,OAAO,CAC/C,cAAe,CAAAV,UAAU,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}